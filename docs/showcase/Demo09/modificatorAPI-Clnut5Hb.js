import{p as n,s as d,f as u,z as s}from"./main-C9kTvUvK.js";const p=async(a,r)=>{const e={data:{project:a,...r}};await n.post("/api/modificators",e,{headers:d()}).then(t=>{const{workingProject:o,updateProjectWithHistory:c}=u.getState();if(!o)return;let i=structuredClone(o.attributes.modificators.data);return i.push(t.data.data),c({modificators:{data:i}},!1)}).then(()=>{s.success("Function created")}).catch(t=>{console.log("An error occured during function creation:",t),s.error("Error adding new function")})},l=async a=>{await n.delete(`/api/modificators/${a}`,{headers:d()}).then(()=>{const{workingProject:r,updateProjectWithHistory:e}=u.getState();if(!r)return;let t=r.attributes.modificators.data;return t=t.filter(o=>o.id!==a),e({modificators:{data:t}},!1)}).then(()=>{s.success("Function deleted")}).catch(r=>{console.log("An error occured during function removing:",r.response),s.error("Error deleting function")})},g=async(a,r)=>await n.put(`/api/modificators/${r}`,{data:a},{headers:d()}).then(e=>{const{workingProject:t,updateProjectWithHistory:o}=u.getState();if(!t||!e?.data?.data)return;let c=structuredClone(t.attributes.modificators.data);return c.map(i=>(i.id===r&&(i.attributes=e.data.data.attributes),i)),o({modificators:{data:c}},!1)}).then(()=>{s.success("Function updated")}).catch(e=>{console.log("An error occured during function update:",e.response),s.error("Error updating function")});export{p as c,l as d,g as u};
